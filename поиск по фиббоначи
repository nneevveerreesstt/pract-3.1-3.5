Определение:
Поиск Фибоначчи — это алгоритм поиска в отсортированном массиве, который использует последовательность чисел Фибоначчи для определения позиций сравнения, обеспечивая сбалансированное деление массива без использования операции деления.

ОБЩИЙ ПРИНЦИП РАБОТЫ ПОИСКА ФИБОНАЧЧИ
ОСНОВНАЯ ИДЕЯ
Поиск Фибоначчи - это улучшенная версия бинарного поиска, которая вместо деления массива пополам использует числа Фибоначчи для определения позиции проверки, что позволяет избежать дорогостоящих операций деления.

КЛЮЧЕВЫЕ ЭТАПЫ
1. ПОДГОТОВКА ЧИСЕЛ ФИБОНАЧЧИ
java
int fibMMinus2 = 0;       // F(k-2)
int fibMMinus1 = 1;       // F(k-1)  
int fibM = fibMMinus1 + fibMMinus2; // F(k)
Инициализируем последовательность Фибоначчи: 0, 1, 1, 2, 3, 5, 8, 13...

2. НАХОЖДЕНИЕ ПОДХОДЯЩЕГО ЧИСЛА ФИБОНАЧЧИ
java
while (fibM < arr.length) {
    fibMMinus2 = fibMMinus1;
    fibMMinus1 = fibM;
    fibM = fibMMinus1 + fibMMinus2;
}
Находим наименьшее число Фибоначчи, которое ≥ длины массива

Например, для массива длины 10: F(6) = 8, F(7) = 13 → выбираем 13

3. ПРОЦЕСС ПОИСКА
java
int i = Math.min(offset + fibMMinus2, arr.length - 1);
Ключевая формула: i = offset + F(k-2)

ПОДРОБНЫЙ ПРОЦЕСС РАБОТЫ
ПРИМЕР ДЛЯ МАССИВА [2, 5, 8, 12, 16, 23, 38, 45, 67, 89, 91] И target = 23
ПОДГОТОВКА:
Числа Фибоначчи: 0, 1, 1, 2, 3, 5, 8, 13
Длина массива: 11 → выбираем F(7) = 13
offset = -1
ШАГ 1:
fibM = 13, fibMMinus1 = 8, fibMMinus2 = 5
i = min(-1 + 5, 10) = min(4, 10) = 4
arr[4] = 16
16 < 23 → ищем СПРАВА
offset = 4
fibM = 8, fibMMinus1 = 5, fibMMinus2 = 3

ШАГ 2:
i = min(4 + 3, 10) = min(7, 10) = 7
arr[7] = 45
45 > 23 → ищем СЛЕВА
fibM = 3, fibMMinus1 = 2, fibMMinus2 = 1

ШАГ 3:
i = min(4 + 1, 10) = min(5, 10) = 5
arr[5] = 23
23 == 23 → НАЙДЕНО!

Временная сложность алгоритма:

- **Все случаи:** O(log n) ✅

## ПОЧЕМУ ТАК?

- Каждый шаг **уменьшает область поиска**
- Использует **числа Фибоначчи** для деления массива
- **F(k) ≈ φ^k** (золотое сечение)
**Использование чисел Фибоначчи обеспечивает сбалансированное деление массива за O(log n) операций**
**Поиск Фибоначчи имеет сложность O(log n), так как на каждом шаге уменьшает область поиска в отношении золотого сечения!**
