Определение:
Сортировка вставками — это алгоритм сортировки, который строит окончательный отсортированный массив по одному элементу за раз, последовательно вставляя каждый следующий элемент в правильную позицию уже отсортированной части массива.

ОБЩИЙ ПРИНЦИП РАБОТЫ СОРТИРОВКИ ВСТАВКАМИ
ОСНОВНАЯ ИДЕЯ
Сортировка вставками работает по принципу "взял и вставил на правильное место" - алгоритм последовательно берет каждый следующий элемент из неотсортированной части и вставляет его в правильную позицию в отсортированной части.

КЛЮЧЕВЫЕ ЭТАПЫ
1. РАЗДЕЛЕНИЕ МАССИВА
python
for i in range(1, len(arr)):
Массив мысленно делится на две части:

Отсортированная (слева, от индекса 0 до i-1)
Неотсортированная (справа, от индекса i до конца)
Начинаем со второго элемента (i=1), так как первый считается отсортированным

2. СОХРАНЕНИЕ ТЕКУЩЕГО ЭЛЕМЕНТА
python
current = arr[i]
Запоминаем элемент, который будем вставлять

Это необходимо, так как его позиция может быть перезаписана при сдвиге

3. ПОИСК ПОЗИЦИИ И СДВИГ ЭЛЕМЕНТОВ
python
while j >= 0 and arr[j] > current:
    arr[j + 1] = arr[j]
    j -= 1
Двигаемся справа налево по отсортированной части

Сдвигаем все элементы больше current вправо

Освобождаем место для вставки

4. ВСТАВКА ЭЛЕМЕНТА
python
arr[j + 1] = current
Вставляем сохраненный элемент на найденную позицию

Элемент занимает свое правильное место в отсортированной части

ВРЕМЕННАЯ СЛОЖНОСТЬ СОРТИРОВКИ ВСТАВКАМИ

O(n²)**
**Когда возникает:** Массив отсортирован в обратном порядке [5, 4, 3, 2, 1]
**Что происходит:**
- Каждый новый элемент нужно вставлять в самое начало
- Приходится сдвигать все предыдущие элементы
**Количество операций для n элементов:**
- **1-й элемент:** 0 операций (уже "отсортирован")
- **2-й элемент:** 1 сравнение + 1 сдвиг
- **3-й элемент:** 2 сравнения + 2 сдвига
- **4-й элемент:** 3 сравнения + 3 сдвига
- **...**
- **n-й элемент:** (n-1) сравнений + (n-1) сдвигов
**Общее количество операций:**
```
0 + 1 + 2 + 3 + ... + (n-1) = n(n-1)/2 ≈ n²/2
```
**Итого: O(n²)**

**Сортировка вставками имеет O(n²), потому что количество операций растет как сумма арифметической прогрессии.**
