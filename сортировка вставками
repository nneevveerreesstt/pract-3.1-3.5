Определение:
Сортировка вставками — это алгоритм сортировки, который строит окончательный отсортированный массив по одному элементу за раз, последовательно вставляя каждый следующий элемент в правильную позицию уже отсортированной части массива.
Объяснение работы кода:
1. ФУНКЦИЯ insertion_sort(arr)
python
def insertion_sort(arr):
    # Проходим по всем элементам массива, начиная со второго
    for i in range(1, len(arr)):
Цикл начинается с индекса 1, так как элемент с индексом 0 считается уже отсортированным

i указывает на текущий элемент, который нужно вставить в отсортированную часть

2. СОХРАНЕНИЕ ТЕКУЩЕГО ЭЛЕМЕНТА
python
# Запоминаем текущий элемент для вставки
current = arr[i]
Сохраняем значение элемента, который будем вставлять

Это необходимо, так как его позиция может быть перезаписана при сдвиге

3. ПОДГОТОВКА К ПОИСКУ ПОЗИЦИИ
python
# Индекс для перемещения по отсортированной части
j = i - 1
j указывает на последний элемент отсортированной части

Начинаем поиск позиции для вставки справа налево

4. СДВИГ ЭЛЕМЕНТОВ И ПОИСК ПОЗИЦИИ
python
# Сдвигаем элементы больше текущего вправо
while j >= 0 and arr[j] > current:
    arr[j + 1] = arr[j]
    j -= 1
Условия цикла:

j >= 0 - не вышли за левую границу массива

arr[j] > current - текущий элемент отсортированной части больше вставляемого

Действия в цикле:

arr[j + 1] = arr[j] - сдвигаем элемент вправо

j -= 1 - переходим к следующему элементу слева

5. ВСТАВКА ЭЛЕМЕНТА
python
# Вставляем текущий элемент на найденную позицию
arr[j + 1] = current
Вставляем сохраненный элемент на правильную позицию

Позиция j + 1 потому что после выхода из цикла j указывает на элемент МЕНЬШИЙ или равный current

ВРЕМЕННАЯ СЛОЖНОСТЬ СОРТИРОВКИ ВСТАВКАМИ

O(n²)**
**Когда возникает:** Массив отсортирован в обратном порядке [5, 4, 3, 2, 1]
**Что происходит:**
- Каждый новый элемент нужно вставлять в самое начало
- Приходится сдвигать все предыдущие элементы
**Количество операций для n элементов:**
- **1-й элемент:** 0 операций (уже "отсортирован")
- **2-й элемент:** 1 сравнение + 1 сдвиг
- **3-й элемент:** 2 сравнения + 2 сдвига
- **4-й элемент:** 3 сравнения + 3 сдвига
- **...**
- **n-й элемент:** (n-1) сравнений + (n-1) сдвигов
**Общее количество операций:**
```
0 + 1 + 2 + 3 + ... + (n-1) = n(n-1)/2 ≈ n²/2
```
**Итого: O(n²)**

**Сортировка вставками имеет O(n²), потому что количество операций растет как сумма арифметической прогрессии.**
