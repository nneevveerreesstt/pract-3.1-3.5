import java.util.Arrays;

public class FibonacciSearch {
    
    /**
     * –ê–ª–≥–æ—Ä–∏—Ç–º –ø–æ–∏—Å–∫–∞ –§–∏–±–æ–Ω–∞—á—á–∏
     * –£–ª—É—á—à–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –±–∏–Ω–∞—Ä–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞, –∏—Å–ø–æ–ª—å–∑—É—é—â–∞—è —á–∏—Å–ª–∞ –§–∏–±–æ–Ω–∞—á—á–∏
     */
    public static int fibonacciSearch(int[] arr, int target) {
        // –ï—Å–ª–∏ –º–∞—Å—Å–∏–≤ –ø—É—Å—Ç–æ–π, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º -1
        if (arr.length == 0) {
            return -1;
        }
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —á–∏—Å–ª–∞ –§–∏–±–æ–Ω–∞—á—á–∏
        int fibMMinus2 = 0;       // F(k-2)
        int fibMMinus1 = 1;       // F(k-1)
        int fibM = fibMMinus1 + fibMMinus2; // F(k)
        
        // –ù–∞—Ö–æ–¥–∏–º –Ω–∞–∏–º–µ–Ω—å—à–µ–µ —á–∏—Å–ª–æ –§–∏–±–æ–Ω–∞—á—á–∏, –∫–æ—Ç–æ—Ä–æ–µ >= –¥–ª–∏–Ω—ã –º–∞—Å—Å–∏–≤–∞
        while (fibM < arr.length) {
            fibMMinus2 = fibMMinus1;
            fibMMinus1 = fibM;
            fibM = fibMMinus1 + fibMMinus2;
        }
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–Ω–¥–µ–∫—Å –¥–ª—è —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏—è —Å–º–µ—â–µ–Ω–∏—è
        int offset = -1;
        
        // –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∏—Å–∫, –ø–æ–∫–∞ –µ—Å—Ç—å —ç–ª–µ–º–µ–Ω—Ç—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
        while (fibM > 1) {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∏–Ω–¥–µ–∫—Å –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –º–∞—Å—Å–∏–≤–∞
            int i = Math.min(offset + fibMMinus2, arr.length - 1);
            
            // –ï—Å–ª–∏ target –±–æ–ª—å—à–µ –∑–Ω–∞—á–µ–Ω–∏—è –≤ i, –∏—â–µ–º –≤ –ø—Ä–∞–≤–æ–π —á–∞—Å—Ç–∏
            if (arr[i] < target) {
                // –°–¥–≤–∏–≥–∞–µ–º —á–∏—Å–ª–∞ –§–∏–±–æ–Ω–∞—á—á–∏ –≤–ø—Ä–∞–≤–æ
                fibM = fibMMinus1;
                fibMMinus1 = fibMMinus2;
                fibMMinus2 = fibM - fibMMinus1;
                offset = i; // –û–±–Ω–æ–≤–ª—è–µ–º —Å–º–µ—â–µ–Ω–∏–µ
            }
            // –ï—Å–ª–∏ target –º–µ–Ω—å—à–µ –∑–Ω–∞—á–µ–Ω–∏—è –≤ i, –∏—â–µ–º –≤ –ª–µ–≤–æ–π —á–∞—Å—Ç–∏
            else if (arr[i] > target) {
                // –°–¥–≤–∏–≥–∞–µ–º —á–∏—Å–ª–∞ –§–∏–±–æ–Ω–∞—á—á–∏ –≤–ª–µ–≤–æ
                fibM = fibMMinus2;
                fibMMinus1 = fibMMinus1 - fibMMinus2;
                fibMMinus2 = fibM - fibMMinus1;
            }
            // –ï—Å–ª–∏ –Ω–∞—à–ª–∏ —ç–ª–µ–º–µ–Ω—Ç
            else {
                return i;
            }
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —ç–ª–µ–º–µ–Ω—Ç
        if (fibMMinus1 == 1 && offset + 1 < arr.length && arr[offset + 1] == target) {
            return offset + 1;
        }
        
        // –≠–ª–µ–º–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω
        return -1;
    }
    
    /**
     * –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –§–∏–±–æ–Ω–∞—á—á–∏
     */
    public static int[] generateFibonacciSequence(int n) {
        if (n <= 0) return new int[0];
        if (n == 1) return new int[]{0};
        
        int[] fib = new int[n];
        fib[0] = 0;
        fib[1] = 1;
        
        for (int i = 2; i < n; i++) {
            fib[i] = fib[i - 1] + fib[i - 2];
        }
        
        return fib;
    }
    
    /**
     * –í–∏–∑—É–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –ø–æ–∏—Å–∫–∞ –§–∏–±–æ–Ω–∞—á—á–∏
     */
    public static int fibonacciSearchVisual(int[] arr, int target) {
        System.out.println("–ü–û–ò–°–ö –§–ò–ë–û–ù–ê–ß–ß–ò - –í–ò–ó–£–ê–õ–ò–ó–ê–¶–ò–Ø");
        System.out.println("–ú–∞—Å—Å–∏–≤: " + Arrays.toString(arr));
        System.out.println("–ò—â–µ–º: " + target);
        System.out.println("=" + "=".repeat(50));
        
        if (arr.length == 0) {
            System.out.println("–ú–∞—Å—Å–∏–≤ –ø—É—Å—Ç!");
            return -1;
        }
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —á–∏—Å–µ–ª –§–∏–±–æ–Ω–∞—á—á–∏
        int fibMMinus2 = 0;
        int fibMMinus1 = 1;
        int fibM = fibMMinus1 + fibMMinus2;
        
        System.out.println("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —á–∏—Å–µ–ª –§–∏–±–æ–Ω–∞—á—á–∏:");
        System.out.println("  F(k-2) = " + fibMMinus2 + ", F(k-1) = " + fibMMinus1 + ", F(k) = " + fibM);
        
        // –ù–∞—Ö–æ–¥–∏–º –ø–æ–¥—Ö–æ–¥—è—â–µ–µ —á–∏—Å–ª–æ –§–∏–±–æ–Ω–∞—á—á–∏
        while (fibM < arr.length) {
            fibMMinus2 = fibMMinus1;
            fibMMinus1 = fibM;
            fibM = fibMMinus1 + fibMMinus2;
            System.out.println("  F(k-2) = " + fibMMinus2 + ", F(k-1) = " + fibMMinus1 + ", F(k) = " + fibM);
        }
        
        int offset = -1;
        int step = 1;
        
        System.out.println("\n–ù–∞—á–∞–ª–æ –ø–æ–∏—Å–∫–∞:");
        System.out.println("  –ù–∞–π–¥–µ–Ω–Ω–æ–µ F(k) = " + fibM + " (>= " + arr.length + ")");
        System.out.println("  –ù–∞—á–∞–ª—å–Ω–æ–µ —Å–º–µ—â–µ–Ω–∏–µ = " + offset);
        
        while (fibM > 1) {
            System.out.println("\n–®–∞–≥ " + step + ":");
            System.out.println("  F(k) = " + fibM + ", F(k-1) = " + fibMMinus1 + ", F(k-2) = " + fibMMinus2);
            
            int i = Math.min(offset + fibMMinus2, arr.length - 1);
            System.out.println("  –ü—Ä–æ–≤–µ—Ä—è–µ–º—ã–π –∏–Ω–¥–µ–∫—Å: i = min(" + offset + " + " + fibMMinus2 + ", " + (arr.length - 1) + ") = " + i);
            System.out.println("  arr[" + i + "] = " + arr[i] + ", target = " + target);
            
            if (arr[i] < target) {
                System.out.println("  " + arr[i] + " < " + target + " ‚Üí –∏—â–µ–º –≤ –ü–†–ê–í–û–ô —á–∞—Å—Ç–∏");
                fibM = fibMMinus1;
                fibMMinus1 = fibMMinus2;
                fibMMinus2 = fibM - fibMMinus1;
                offset = i;
                System.out.println("  –ù–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è: F(k)=" + fibM + ", F(k-1)=" + fibMMinus1 + ", F(k-2)=" + fibMMinus2);
                System.out.println("  –ù–æ–≤–æ–µ —Å–º–µ—â–µ–Ω–∏–µ: " + offset);
            }
            else if (arr[i] > target) {
                System.out.println("  " + arr[i] + " > " + target + " ‚Üí –∏—â–µ–º –≤ –õ–ï–í–û–ô —á–∞—Å—Ç–∏");
                fibM = fibMMinus2;
                fibMMinus1 = fibMMinus1 - fibMMinus2;
                fibMMinus2 = fibM - fibMMinus1;
                System.out.println("  –ù–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è: F(k)=" + fibM + ", F(k-1)=" + fibMMinus1 + ", F(k-2)=" + fibMMinus2);
            }
            else {
                System.out.println("  ‚úÖ –ù–∞–π–¥–µ–Ω —ç–ª–µ–º–µ–Ω—Ç –Ω–∞ –ø–æ–∑–∏—Ü–∏–∏ " + i);
                return i;
            }
            step++;
        }
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
        if (fibMMinus1 == 1 && offset + 1 < arr.length && arr[offset + 1] == target) {
            System.out.println("\n–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞:");
            System.out.println("  arr[" + (offset + 1) + "] = " + arr[offset + 1] + " == " + target);
            System.out.println("  ‚úÖ –ù–∞–π–¥–µ–Ω —ç–ª–µ–º–µ–Ω—Ç –Ω–∞ –ø–æ–∑–∏—Ü–∏–∏ " + (offset + 1));
            return offset + 1;
        }
        
        System.out.println("\nüîç –≠–ª–µ–º–µ–Ω—Ç " + target + " –Ω–µ –Ω–∞–π–¥–µ–Ω");
        return -1;
    }
    
    /**
     * –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å –±–∏–Ω–∞—Ä–Ω—ã–º –ø–æ–∏—Å–∫–æ–º
     */
    public static int binarySearch(int[] arr, int target) {
        int left = 0;
        int right = arr.length - 1;
        
        while (left <= right) {
            int mid = left + (right - left) / 2;
            
            if (arr[mid] == target) {
                return mid;
            } else if (arr[mid] < target) {
                left = mid + 1;
            } else {
                right = mid - 1;
            }
        }
        
        return -1;
    }
    
    