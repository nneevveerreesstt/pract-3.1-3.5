Определение:
Пирамидальная сортировка (Heap Sort) — это алгоритм сортировки, основанный на структуре данных "двоичная куча", который использует свойства max-heap для эффективного извлечения максимальных элементов и их последовательного размещения в отсортированном порядке.

Общий принцип работы алгоритма:
ОСНОВНАЯ ИДЕЯ
Пирамидальная сортировка использует структуру данных "двоичная куча" для эффективного извлечения максимальных элементов и их помещения в конец массива.

ДВЕ ОСНОВНЫЕ ФАЗЫ
1. ПОСТРОЕНИЕ MAX-HEAP (КУЧИ)
cpp
for (int i = n / 2 - 1; i >= 0; i--) {
    heapify(arr, n, i);
}
Что происходит:
Преобразуем обычный массив в max-heap
В max-heap каждый родитель больше своих потомков
Начинаем с последнего нелистового узла (n/2 - 1) и идем к корню

2. ИЗВЛЕЧЕНИЕ ЭЛЕМЕНТОВ ИЗ КУЧИ
cpp
for (int i = n - 1; i > 0; i--) {
    swap(arr[0], arr[i]);  // Максимум → в конец
    heapify(arr, i, 0);    // Восстанавливаем кучу
}
Что происходит:

Корень кучи (максимальный элемент) перемещается в конец массива
Уменьшаем размер кучи на 1
Восстанавливаем свойства кучи для нового корня

КЛЮЧЕВАЯ ФУНКЦИЯ heapify
cpp
void heapify(vector<int>& arr, int n, int i) {
    int largest = i;        // Корень
    int left = 2 * i + 1;   // Левый потомок
    int right = 2 * i + 2;  // Правый потомок

    // Находим наибольший среди корня и потомков
    if (left < n && arr[left] > arr[largest])
        largest = left;
    if (right < n && arr[right] > arr[largest])
        largest = right;

    // Если наибольший не корень - меняем и рекурсивно heapify
    if (largest != i) {
        swap(arr[i], arr[largest]);
        heapify(arr, n, largest);
    }
}
Временная сложность алгоритма:
Все случаи: O(n log n) 

ПОЧЕМУ ТАК?
ПОСТРОЕНИЕ КУЧИ: O(n)
Преобразование массива в кучу занимает линейное время

Не просто n × log n, а именно O(n) благодаря особому порядку обработки

ИЗВЛЕЧЕНИЕ ЭЛЕМЕНТОВ: O(n log n)
n раз извлекаем максимальный элемент
Каждое извлечение + восстановление кучи: O(log n)
Итого: n × O(log n) = O(n log n)

КЛЮЧЕВОЙ ФАКТОР
Высота двоичной кучи = log n
Каждая операция heapify работает за O(высота) = O(log n)

Гарантированная производительность благодаря структуре кучи

ИТОГ
O(n) + O(n log n) = O(n log n)

Пирамидальная сортировка всегда работает за O(n log n) независимо от входных данных!
