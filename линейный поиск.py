def linear_search(arr, target):
    """
    –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã–π (–ª–∏–Ω–µ–π–Ω—ã–π) –ø–æ–∏—Å–∫
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω–¥–µ–∫—Å —ç–ª–µ–º–µ–Ω—Ç–∞ target –≤ –º–∞—Å—Å–∏–≤–µ arr
    –ï—Å–ª–∏ —ç–ª–µ–º–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç -1
    """
    # –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –≤—Å–µ–º —ç–ª–µ–º–µ–Ω—Ç–∞–º –º–∞—Å—Å–∏–≤–∞
    for i in range(len(arr)):
        # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π —ç–ª–µ–º–µ–Ω—Ç —Å –∏—Å–∫–æ–º—ã–º
        if arr[i] == target:
            return i  # –≠–ª–µ–º–µ–Ω—Ç –Ω–∞–π–¥–µ–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∏–Ω–¥–µ–∫—Å
    
    return -1  # –≠–ª–µ–º–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω


def linear_search_visual(arr, target):
    """
    –í–µ—Ä—Å–∏—è —Å –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–µ–π –ø—Ä–æ—Ü–µ—Å—Å–∞ –ø–æ–∏—Å–∫–∞
    """
    print(f"–ú–∞—Å—Å–∏–≤: {arr}")
    print(f"–ò—â–µ–º —ç–ª–µ–º–µ–Ω—Ç: {target}")
    print("=" * 40)
    
    for i in range(len(arr)):
        print(f"–®–∞–≥ {i + 1}: –ø—Ä–æ–≤–µ—Ä—è–µ–º arr[{i}] = {arr[i]}")
        
        if arr[i] == target:
            print(f"‚úÖ –≠–ª–µ–º–µ–Ω—Ç –Ω–∞–π–¥–µ–Ω –Ω–∞ –ø–æ–∑–∏—Ü–∏–∏ {i}!")
            print(f"–ü–æ—Ç—Ä–µ–±–æ–≤–∞–ª–æ—Å—å {i + 1} —Å—Ä–∞–≤–Ω–µ–Ω–∏–π")
            return i
        
        print(f"‚ùå arr[{i}] ‚â† {target}, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –ø–æ–∏—Å–∫...")
    
    print(f"üîç –≠–ª–µ–º–µ–Ω—Ç {target} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –º–∞—Å—Å–∏–≤–µ")
    return -1


def linear_search_all_occurrences(arr, target):
    """
    –ü–æ–∏—Å–∫ –≤—Å–µ—Ö –≤—Ö–æ–∂–¥–µ–Ω–∏–π —ç–ª–µ–º–µ–Ω—Ç–∞
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∏–Ω–¥–µ–∫—Å–æ–≤ –≤—Å–µ—Ö –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
    """
    indices = []
    
    for i in range(len(arr)):
        if arr[i] == target:
            indices.append(i)
    
    return indices


def linear_search_with_sentinel(arr, target):
    """
    –õ–∏–Ω–µ–π–Ω—ã–π –ø–æ–∏—Å–∫ —Å–æ —Å—Ç—Ä–∞–∂–µ–º (sentinel)
    –£–ª—É—á—à–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è, –∏–∑–±–µ–≥–∞–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –≥—Ä–∞–Ω–∏—Ü
    """
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —ç–ª–µ–º–µ–Ω—Ç
    last = arr[-1]
    
    # –ó–∞–º–µ–Ω—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —ç–ª–µ–º–µ–Ω—Ç –∏—Å–∫–æ–º—ã–º –∑–Ω–∞—á–µ–Ω–∏–µ–º
    arr[-1] = target
    
    i = 0
    # –ò—â–µ–º –¥–æ —Ç–µ—Ö –ø–æ—Ä, –ø–æ–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–º target
    while arr[i] != target:
        i += 1
    
    # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —ç–ª–µ–º–µ–Ω—Ç
    arr[-1] = last
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—à–ª–∏ –ª–∏ –º—ã target
    if i < len(arr) - 1 or arr[-1] == target:
        return i
    else:
        return -1


def linear_search_condition(arr, condition_func):
    """
    –ü–æ–∏—Å–∫ –ø–æ –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–º—É —É—Å–ª–æ–≤–∏—é
    condition_func - —Ñ—É–Ω–∫—Ü–∏—è, –≤–æ–∑–≤—Ä–∞—â–∞—é—â–∞—è True/False –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
    """
    for i in range(len(arr)):
        if condition_func(arr[i]):
            return i, arr[i]
    
    return -1, None

